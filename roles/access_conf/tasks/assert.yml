---
- name: assert | Validate permissions is either + or -
  ansible.builtin.assert:
    that:
      - "item.permissions is undefined or
        item.permissions in ['+', '-']"
    fail_msg: "The permissions must be either '+' or '-'"
  loop: "{{ access_conf_common_entries + access_conf_extra_entries }}"

- name: assert | Validate user or group is a string
  ansible.builtin.assert:
    that:
      - "item.name is defined"
      - "item.name is string"
    fail_msg: "Each entry must have a user or group defined, and it must be a string"
  loop: "{{ access_conf_common_entries + access_conf_extra_entries }}"

# yamllint disable rule:line-length
- name: assert | Validate origins
  ansible.builtin.assert:
    that:
      # Valid string
      # FQDN
      # IPv4 w/ optional subnet
      # IPv6 w/ optional subnet
      - "item.origins in ['ALL', 'LOCAL', 'cron', 'crond']" # or
        # item is match('^(?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.(?!-)(?:[A-Za-z0-9-]{1,63}\\.){1,}[A-Za-z]{2,6}$') or
        # item is match('^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/(?:[89]|[12][0-9]|3[0-2]))?$') or
        # item is match('^((?:[0-9A-Fa-f]{1,4}:){7}(?:[0-9A-Fa-f]{1,4}|:)|(?:[0-9A-Fa-f]{1,4}:){1,7}:|(?:[0-9A-Fa-f]{1,4}:){1,6}:[0-9A-Fa-f]{1,4}|(?:[0-9A-Fa-f]{1,4}:){1,5}(?::[0-9A-Fa-f]{1,4}){1,2}|(?:[0-9A-Fa-f]{1,4}:){1,4}(?::[0-9A-Fa-f]{1,4}){1,3}|(?:[0-9A-Fa-f]{1,4}:){1,3}(?::[0-9A-Fa-f]{1,4}){1,4}|(?:[0-9A-Fa-f]{1,4}:){1,2}(?::[0-9A-Fa-f]{1,4}){1,5}|[0-9A-Fa-f]{1,4}:(?::[0-9A-Fa-f]{1,4}){1,6}|:(?:(?::[0-9A-Fa-f]{1,4}){1,7}|:)|fe80:(?::[0-9A-Fa-f]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|(?:[0-9A-Fa-f]{1,4}:){1,4}:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3})(?:\/(?:[0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8]))?$')"
    fail_msg: "Origins must be 'ALL', 'LOCAL', 'cron', 'crond', a hostname (FQDN), an IP address (IPv4 or IPv6) with optional subnet."
  loop: "{{ access_conf_common_entries + access_conf_extra_entries | map(attribute='origins') | flatten }}"
# yamllint enable rule:line-length
